<?php

use \Drupal\node\Entity\Node;
use \Drupal\taxonomy\Entity\Term;

/**
* Implements hook_rebuild().
*/
function program_catalog_rebuild() {
  program_catalog_handle_feed();
}

/**
* Implements hook_cron().
*/
function program_catalog_cron() {
  program_catalog_handle_feed();
}

/**
 * Pull in the feed
 */
function program_catalog_handle_feed() {
  // Get all Staff Profile nodes
  $nids = \Drupal::entityQuery('node')->condition('type', 'programs')->execute();
  $nodes =  Node::loadMultiple($nids);

  $fromFeed = file_get_contents('https://datastore.exnet.iastate.edu/mydata/EducationalPrograms.json');
  $programs = json_decode($fromFeed, TRUE);

  if (sizeof($programs) < 100) {
    \Drupal::logger('program_catalog')->info('Not enough records - exiting');
    return;
  }

  // Mark nodes as "stale"
  foreach ($nodes as $node) {
    if ($node->isPublished()) {
      $node->set('field_stale', TRUE)->save();
    }
  }

  // Handle each planned program
  foreach ($programs as $program) {
    // Find the right node if it exists
    $mynode = array();
    foreach ($nodes as $node) {
      if ($node->field_mydata_id->value == $program['Id']) {
        $mynode = $node;
        break;
      }
    }

    // Create a new one if not found
    if (empty($mynode)) {
      $mynode = Node::create(['type' => 'programs', 'title'=>$program['Name']]);
    }

    // General Information
    $mynode->setTitle($program['Name']);
    $mynode->field_mydata_id->value = $program['Id'];
    $mynode->field_event_title_filter->value = $program['Name'];


    // Handle website link
    $mynode->field_website = array();
    $website = $program['Planned_Program_Website__c'];
    if (!empty($website)) {
      if ('htt' != substr($website,0,3)) {
        $website = 'https://' . $website;
      }
      $mynode->field_website = ['uri' => $website, 'title' => 'More About This Program', ];
    }

    // Handle Body
    if (!empty($program['Web_Description__c'])) {
      $mynode->body->value = $program['Web_Description__c'];
    } elseif (!empty($program['hed__Extended_Description__c'])) {
      $mynode->body->value = $program['hed__Extended_Description__c'];
    } else {
      $mynode->body->value = $program['hed__Description__c'];
    }
    if (!empty($program['Smugmug_ID__c'])) {
      $mynode->body->value = '<img class="educational_program_image" src="https://photos.smugmug.com/photos/' . $program['Smugmug_ID__c'] . '/0/XL/' . $program['Smugmug_ID__c'] . '-XL.jpg" alt="" />'. $mynode->body->value . '<div class="clearer"></div>';
    }
    $mynode->body->format = 'basic';
    $mynode->body->summary = $program['hed__Description__c'];

    //Handle Contact Info
    $mynode->field_contact_name->value = '';
    if (!empty($program['Primary_Contact__r.FirstName'])) {
      $mynode->field_contact_name->value = $program['Primary_Contact__r.FirstName'] . ' ';
    }
    $mynode->field_contact_name->value .= $program['Primary_Contact__r.LastName'];
    $mynode->field_contact_email->value = $program['Primary_Contact__r.Email'];
    $mynode->field_contact_phone->value = $program['Primary_Contact__r.Phone'];

    // Handle Category
    $mynode->field_category = array();
    if (!empty($program['Program_Category__c'])) {
      $mynode->field_category[] = ['target_id' => program_catalog_get_taxonomy_term($program['Program_Category__c'], 'category')];
    }

    // Handle Critical Issue
    $mynode->field_critical_issue = array();
    if (!empty($program['Critical_Issue__c'])) {
      $mynode->field_critical_issue[] = ['target_id' => program_catalog_get_taxonomy_term($program['Critical_Issue__c'], 'critical_issue')];
    }

    // Handle Program Area
    $mynode->field_program_area = array();
    if (!empty($program['hed__Account__r.Name'])) {
      $mynode->field_program_area[] = ['target_id' => program_catalog_get_taxonomy_term($program['hed__Account__r.Name'], 'program_area')];
    }

    // Handle Interest Areas
    $mynode->field_interest_areas = array();
    $interestAreas = explode(';', $program['Related_Interest_Areas__c']);
    foreach ($interestAreas as $interestArea) {
      $interestArea = trim($interestArea);
      if (!empty($interestArea)) {
        $mynode->field_interest_areas[] = ['target_id' => program_catalog_get_taxonomy_term($interestArea, 'interest_areas')];
      }
    }

    $mynode->set('field_stale', FALSE)->save();
    $mynode->setPublished();
    $mynode->save();
  }

  // Unpublish nodes that are still marked "stale"
  foreach ($nodes as $node) {
    if ($node->get('field_stale')->value) {
      $node->field_stale->value = FALSE;
      $node->setUnpublished();
      $node->save();
    }
  }
}

/*
 * Implements hook_preprocess_node()
 */
function program_catalog_preprocess_node(&$variables)
{
  $node = $variables['node'];
  //check content type
  if ($node->getType() == 'programs') {
    $variables['#attached']['library'][] = 'program_catalog/programs';
  }
}


/*
 * Implements hook_preprocess_views_view()
 */
function program_catalog_preprocess_views_view(&$variables)
{
//  $variables['#cache']['contexts'][] = 'route';
  if ($variables['id'] == 'search_programs' || $variables['id'] == 'programs_by_program_area') {
    $variables['#attached']['library'][] = 'program_catalog/programs-search';

  }
}

/*
 * Return ID number of taxonomy term
 */
function program_catalog_get_taxonomy_term($name, $vid) {
  $taxonomy = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['name' => $name, 'vid' => $vid]);
  if (!empty($taxonomy)) {
    $term_id = array_keys($taxonomy)[0];
  } else {
    $term_id = Term::create(['name' => $name, 'vid' => $vid])->save();
  }

  return $term_id;
}
